{"version":3,"sources":["components/about.js","components/product.js","components/Home.js","components/login.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["index","props","react_default","a","createElement","Menu_display1","match","react_router_dom","to","concat","path","react_router","component","params","id","Main","onClick","sessionStorage","clear","About","Product","setItem","JSON","stringify","lastUrlLocation","parse","getItem","console","log","removeItem","pathname","history","push","exact","Home","Login","App","components_Main","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAKeA,EAHD,SAACC,GACX,OAAOC,EAAAC,EAAAC,cAAA,wBCeIC,EAdO,SAACJ,GAAU,IACtBK,EAASL,EAATK,MACP,OAAOJ,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAE,GAAAC,OAAKH,EAAMI,KAAX,OAAR,iBACAR,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAE,GAAAC,OAAKH,EAAMI,KAAX,OAAR,iBACAR,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACIT,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOD,KAAI,GAAAD,OAAKH,EAAMI,KAAX,QAAuBE,UAAW,SAACX,GAAU,IACrCY,EAAWZ,EAAnBK,MAAQO,OACf,OAAOX,EAAAC,EAAAC,cAAA,WAAMS,EAAOC,UCQrBC,EAhBF,SAACd,GAAU,IACbK,EAASL,EAATK,MACP,OAAQJ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UACTF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAE,SAAR,gBADS,KAETN,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAE,GAAAC,OAAKH,EAAMI,KAAX,WAAR,gBAFS,KAGTR,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACIC,GAAE,GAAAC,OAAKH,EAAMI,KAAX,aADN,gBAHS,KAKTR,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAE,SAAYQ,QAAS,kBAAMC,eAAeC,UAAlD,iBAEAhB,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACIT,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOD,KAAI,GAAAD,OAAKH,EAAMI,KAAX,UAAyBE,UAAWO,IAC/CjB,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOD,KAAI,GAAAD,OAAKH,EAAMI,KAAX,YACJE,UAAWQ,OCGfpB,EAlBD,SAACC,GACX,OAAOC,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,UAAQY,QAAS,WACbC,eAAeI,QAAQ,WAAYC,KAAKC,UAAU,CAACT,GAAI,OACvD,IAAMU,EAAkBF,KAAKG,MAAMR,eAAeS,QAAQ,oBAC1DC,QAAQC,IAAIJ,GACZP,eAAeY,WAAW,mBACO,MAA7BL,EAAgBM,SAChB7B,EAAM8B,QAAQC,KAAK,QACiB,WAA7BR,EAAgBM,SACvB7B,EAAM8B,QAAQC,KAAK,QACZR,GACPvB,EAAM8B,QAAQC,KAAKR,KAV3B,kBCmBOT,EAbF,kBACXb,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOsB,OAAK,EAACvB,KAAK,IAAIE,UAAWsB,IACjChC,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOsB,OAAK,EAACvB,KAAK,UAAUE,UAAWuB,IACvCjC,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOD,KAAK,cAAcE,UAAWQ,OCX5BgB,EADH,kBAAOlC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACiC,EAAD,QCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnC,MACvB,2DCXNoC,IAASC,OACPzC,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACwC,EAAD,OAEDC,SAASC,eAAe,SDsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6621d0eb.chunk.js","sourcesContent":["import React from 'react'\n\nconst index = (props) => {\n    return <div>more ...</div>\n}\nexport default index","import React from 'react'\nimport {Switch, Route, Link} from 'react-router-dom'\n\n\nconst Menu_display1 = (props) => {\n    const {match} = props;\n    return <div>\n        <Link to={`${match.path}/1`}>产品1</Link>\n        <Link to={`${match.path}/2`}>产品2</Link>\n        <button>123</button>\n        <Switch>\n            <Route path={`${match.path}/:id`} component={(props) => {\n                const {match: {params}} = props;\n                return <div>{params.id}</div>\n            }}/>\n        </Switch>\n    </div>\n}\nexport default Menu_display1","import React from 'react'\nimport {Switch, Route, Link} from 'react-router-dom'\nimport About from \"./about\";\nimport Product from \"./product\";\n\nconst Main = (props) => {\n    const {match} = props;\n    return (<div><h1>\n        <Link to={`/Home`}>主页</Link> |\n        <Link to={`${match.path}/about`}>关于</Link> |\n        <Link\n            to={`${match.path}/product`}>产品</Link> |\n        <Link to={`/Login`} onClick={() => sessionStorage.clear()}>登出</Link>\n    </h1>\n        <Switch>\n            <Route path={`${match.path}/about`} component={About}/>\n            <Route path={`${match.path}/product`}\n                   component={Product}/>\n        </Switch>\n    </div>)\n}\nexport default Main","import React from 'react'\n\nconst index = (props) => {\n    return <div>\n        <button onClick={() => {\n            sessionStorage.setItem(\"userInfo\", JSON.stringify({id: 101}));\n            const lastUrlLocation = JSON.parse(sessionStorage.getItem(\"lastUrlLocation\"));\n            console.log(lastUrlLocation)\n            sessionStorage.removeItem(\"lastUrlLocation\")\n            if (lastUrlLocation.pathname === \"/\") {\n                props.history.push(\"Home\")\n            } else if (lastUrlLocation.pathname === \"/Login\") {\n                props.history.push(\"Home\")\n            } else if (lastUrlLocation) {\n                props.history.push(lastUrlLocation)\n            }\n        }}>登录\n        </button>\n    </div>\n}\nexport default index","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport Home from './Home'\nimport Login from './login'\nimport Product from './product'\n\n// import FullRoster from './FullRoster'\n// import Roster from './Roster'\n// import Schedule from './Schedule'\n\nconst Main = () => (\n  <main>\n    <Switch>\n      <Route exact path='/' component={Home}/>\n      <Route exact path='/player' component={Login}/>\n      <Route path='/player/:id' component={Product}/>\n\n      {/* <Route path='/roster' component={Roster}/>\n      <Route path='/schedule' component={Schedule}/> */}\n    </Switch>\n  </main>\n)\n\nexport default Main\n","import React from 'react'\nimport Main from './components/Main'\n\nconst App = () => (<div><Main/></div>)\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom'\nReactDOM.render((\n  <BrowserRouter>\n    <App></App>\n  </BrowserRouter>\n), document.getElementById('root'))\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}